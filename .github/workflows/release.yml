name: Release

on:
  schedule:
    - cron: '0 0 * * *'  # 每天运行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  check-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      should_release: ${{ steps.check_version.outputs.should_release }}
      latest_version: ${{ steps.get_version.outputs.latest_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest Tailscale version
        id: get_version
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/tailscale/tailscale/releases/latest | grep tag_name | cut -d '"' -f 4)
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "Latest Tailscale version: $LATEST_VERSION"

      - name: Check if version exists
        id: check_version
        run: |
          if git tag | grep -q "${{ steps.get_version.outputs.latest_version }}"; then
            echo "Version ${{ steps.get_version.outputs.latest_version }} already exists"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "New version found: ${{ steps.get_version.outputs.latest_version }}"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Create new release
        if: steps.check_version.outputs.should_release == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag ${{ steps.get_version.outputs.latest_version }}
          git push origin ${{ steps.get_version.outputs.latest_version }}

  goreleaser:
    needs: check-version
    if: ${{ needs.check-version.outputs.should_release == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Set up GOPATH
        run: |
          mkdir -p $GOPATH/bin
          echo "GOPATH=$GOPATH" >> $GITHUB_ENV
          echo "PATH=$GOPATH/bin:$PATH" >> $GITHUB_ENV
          echo $(pwd)


      - name: Prepare workspace
        run: |
          git clone https://github.com/tailscale/tailscale.git --branch ${{ needs.check-version.outputs.latest_version }} --depth 1 tailscale
          cp .goreleaser.yml tailscale/.goreleaser.yml
          cp -r packaging tailscale/packaging

          cd tailscale
          


      - name: Debug environment
        run: |
          echo "GOPATH: $GOPATH"
          echo "PATH: $PATH"
          echo "DERPER_VERSION: ${{ needs.check-version.outputs.latest_version }}"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          args: release --clean
          workdir: tailscale
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DERPER_VERSION: ${{ needs.check-version.outputs.latest_version }}
          GOPATH: ${{ env.GOPATH }} 